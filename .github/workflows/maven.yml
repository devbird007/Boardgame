name: Java CI with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  # Job 1: Build the Java application and run tests
  build-and-test:
    runs-on: self-hosted

    env:
      ARTIFACT_NAME: boardgame-${{ github.sha }}

    outputs:
      artifact_name: ${{ env.ARTIFACT_NAME }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history and tags for better versioning

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: target/*.jar

  # Job 2: Run static analysis.
  static-analysis:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS scan
        run: |
          trivy fs --format table -o trivy-fs-report-dev.html .

      - name: Upload Trivy FS Scan Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report
          path: trivy-fs-report-dev.html

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # jq is already installed on the self-hosted runner
      # This block should only be uncommented if the workflow is being run on a Github (ephemeral) runner
      # - name: Install jq
      # run: sudo apt-get update && sudo apt-get install -y jq

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 300
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: "Show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

# Job 3: Build and push the Docker Image(s)
  package-docker:
    runs-on: self-hosted
    needs: build-and-test
    outputs:
      version: ${{ steps.meta.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-and-test.outputs.artifact_name }}
          path: target/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-dev
          tags: |
            type=sha,prefix=sha-,format=short
            type=ref,event=branch,prefix=branch-

      - name: Build Docker Image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # To use Github Actions cache
          cache-to: type=gha,mode=max

  scan-image:
    runs-on: self-hosted
    needs: package-docker
    steps:
      - name: Trivy Image Scan
        run: |
          IMAGE_TO_SCAN="${{ secrets.DOCKERHUB_USERNAME }}/boardgame-dev:${{ needs.package-docker.outputs.version }}"

          echo "Scanning image: ${IMAGE_TO_SCAN}"

          trivy image --exit-code 1 --severity CRITICAL,HIGH \
            --format table -o trivy-image-report.html \
            "${IMAGE_TO_SCAN}"

      - name: Upload Trivy Image Scan Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report-dev.html