name: Java CI with Maven

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'release/*'
      - 'hotfix/*'
    tags:
      - 'v*'
  pull_request:
    types:
      - closed
    branches:
      - 'main'

jobs:
  build:
    runs-on: self-hosted
    ## This next line will run for every event except pull requests. 
    ## For pull requests, it'd check if they're merged before executing.
  # if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetches all history and tags for better versioning

    # Set up Java, compile, test and build the artifact
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - uses: actions/upload-artifact@v4
      with:
        name: Boardgame
        path: target/*.jar
    
    # Scan with Trivy, Scan with Sonarqube and check Quality Gate status
    - name: Trivy FS Scan
      run: |
        trivy fs --format table -o trivy-fs-report.html .
    
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      timeout-minutes: 3
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: Show SonarQube Quality Gate Status value
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      # Build and push the Docker image
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ vars.DOCKERHUB_USERNAME }}/boardgame
        tags: |
          # Production-ready tags
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

          # For internal reference/debugging
          type=sha

          # Environment-specific tags (often with conditionals)
          type=raw,value=latest,enable={{is_default_branch}}

          # Feature branch/PR tagging for testing
          type=ref,event=branch
          type=ref,event=pr

    - name: Build docker image
      id: docker_build
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        load: true
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha # Use Github Actions cache
        cache-to: type=gha,mode=max

    - name: Trivy Image Scan
      # This next line shouldn't be here in a production environment 
      # as you want your pipeline to fail if it sees high and
      # critical vulnerabilities in your images.
      continue-on-error: true
      run: |
        trivy image --format table -o trivy-image-report.html --exit-code 1 --severity CRITICAL,HIGH ${{ steps.meta.outputs.tags }}

    - name: Push Docker image to Dockerhub
      if: success()
      run: |
        # Push all tags directly using Docker CLI
        for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
          docker push $tag
        done