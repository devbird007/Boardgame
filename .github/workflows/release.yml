name: JAVA CICD - Release

on:
  # Triggers ONLY on pushes of tags matching v*
  push:
    tags:
      - 'v*'

jobs:
  # Job: Build and Push Release to Production Registry
  release:
    name: Release (Tags)
    runs-on: self-hosted

    steps:
      - name: Checkout Code (Release)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for SemVer tag extraction

      - name: Set up JDK 17 (Release)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven (Release)
        run: mvn -B package --file pom.xml

      - name: Trivy FS Scan (Release)
        run: |
          trivy fs --format table -o trivy-fs-report-release.html .

      - name: SonarQube Scan (Release)
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    # jq is already installed on the self-hosted runner
    # This block should only be uncommented if the workflow is being run on a Github (ephemeral) runner
    # - name: Install jq
    # run: sudo apt-get update && sudo apt-get install -y jq

      - name: SonarQube Quality Gate check (Release)
        id: sonarqube-quality-gate-check-release
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: Show SonarQube Quality Gate Status value (Release)
        run: echo "Release Build - SonarQube Quality Gate status is ${{ steps.sonarqube-quality-gate-check-release.outputs.quality-gate-status }}"

      # --- Docker Steps for PRODUCTION Environment ---
      - name: Set up QEMU (Release)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx (Release)
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (Release)
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}


      - name: Extract RELEASE metadata (tags, labels) for Docker
        id: meta-release
        uses: docker/metadata-action@v5
        with:
          # NOTE: Pushing to the main production image name
          images: ${{ vars.DOCKERHUB_USERNAME }}/boardgame
          tags: |
            type=semver,pattern={{major.minor}}   # v1.2
#            type=semver,pattern={{version}}     # v1.2.3
#            type=semver,pattern={{major}}       # v1
#            type=raw,value=latest               # latest
#            type=sha,prefix=sha-,format=short   # sha-a1b2c3d

      - name: Log Raw Metadata Output
        shell: bash
        run: |
          echo "--- Raw Tags Output ---"
          echo "${{ steps.meta-release.outputs.tags }}"
          echo "--- End Raw Tags ---"
          echo "--- JSON Output ---"
          # The JSON output is often more structured and revealing
          echo '${{ steps.meta-release.outputs.json }}'
          echo "--- End JSON ---"

      - name: Build RELEASE docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          push: false
          tags: ${{ steps.meta-release.outputs.tags }}
          labels: ${{ steps.meta-release.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Image Scan (Release)
        # This next line shouldn't be here in a production environment 
        # as you want your pipeline to fail if it sees high and
        # critical vulnerabilities in your images.
        continue-on-error: true
        run: |
          echo "Searching for SHA tag in output:"
          echo "${{ steps.meta-release.outputs.tags }}" # Log the input for debugging
          # Find the line containing sha-, trust head -n 1 gets the right one if multiple somehow exist.
          SHA_TAG_LINE=$(echo "${{ steps.meta-release.outputs.tags }}" | grep 'sha-' | head -n 1)

          echo "Found line: $SHA_TAG_LINE"

          # Check if the line variable is empty
          if [ -z "$SHA_TAG_LINE" ]; then
            echo "ERROR: No tag containing 'sha-' found in metadata output.";
            # exit 1;
            continue
          fi

          # Now run Trivy with the found tag (line)
          echo "Scanning image tag: $SHA_TAG_LINE"
          trivy image --format table -o trivy-image-report-release.html --severity CRITICAL,HIGH ${SHA_TAG_LINE}

      - name: Push RELEASE Docker image to Dockerhub/RELEASE-Repository
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-release.outputs.tags }}
          labels: ${{ steps.meta-release.outputs.labels }}
          # Leverage cache from the previous build step
          cache-from: type=gha
          cache-to: type=gha,mode=max